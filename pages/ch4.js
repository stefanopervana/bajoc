import Layout from '../components/layout'

export default () => (
  <Layout title='Chapter 4'>
    <div>
   <style jsx>{`

                    .col-md-6 {
                        border-radius: 4px;
                        overflow: hidden;
                        box-shadow: 0 9px 9px rgba(0, 0, 0, 0.9);
                        display: block;
                        min-height: 70%;
                        font-family: Verdana;
                        max-width: 1100px;
                        background-color: #E8EDEE;
                        margin: auto;
                        margin-top: auto;
                        margin-right: auto;
                        margin-bottom: auto;
                        margin-left: auto;
                        white-space: pre-wrap;
                        border: none;
                        box-sizing: border-box;
                        color: #2D0D0D;
                        line-height: 1.1;
                        padding: 4.7em;

                    }

                    .home {
                        margin: 1.5em 0;
                        
                    }

                    h1 {
                        color: #867452;
                        font-size: 60px;
                    }

                    h2 {
                        color: #867452;
                        font-size: 40px;
                    }
                    
                    h3 {
                        color: #867452;
                        font-size: 30px;
                    }


                    .it, .listit {
                        color: brown;
                        font-size: 24px;
                        font-style: italic;
                        letter-spacing: 0.04em;
                    }
                    .p, .listitem {
                        color: #75AFAD;
                        font-size: 24px;
                        font-style: italic;
                        letter-spacing: 0.04em;
                    }

                    pre {display: block;
                    font-family: monospace;
                    white-space: pre;
                    margin: 1em 0;
                    font-size: 16px


                    }

                    code
                    {margin: auto,
                        font-family:"Lucida Console";
                        "Andale Mono";
                        "Courier New";
                        Courier;
                        monospace;
                        font-style:normal;
                        color:#395C73;}
                    
                    code strong
                    {color:#000;
                        background:#F5FD11;
                        padding:1px;
                        font-weight:normal;
                    }

                    .interno {
                    font-family: verdana;
                    font-style: italic;
                    color: #395C73;
                    font-size: 24px;    
                    }

                    .sub{
                        text-decoration: underline;
                    }
                `}</style>

    <div className="col-md-6">   

    <h1>Chapter 4: Star Trek Video Game Demo</h1>
<p className="it">Hasta ahora, hemos revisado React a partir de un nivel muy alto. Esto fue intencional, ya que hay disponibles un montón de tutoriales de formación profesional en React. Sin embargo, ningún libro en una biblioteca de JavaScript está completo sin una aplicación de demostración que explica cómo utilizar efectivamente la biblioteca.</p>
<p className="p">So far, we have reviewed React from a very high level. This was intentional since there are plenty of vocational tutorials on React available. However, no book on a JavaScript library is complete without a demo application explaining how to actually use the library.</p>
<p className="it">Por lo tanto, vamos a construir una aplicación que toca las partes más importantes de la API React. Con el fin de que siga siendo divertido, vamos a construir un simple 'videojuego de viaje espacial' con la temática Star Trek. Esto también refuerza la idea de que las decisiones de diseño de React se heredan de ciertos motores de juego. El juego consistirá en una nave espacial en un mapa de las estrellas de una versión reducida del Cuadrante Alfa de Star Trek . Hay un montón de estado para gestionar aquí: la situación de la nave, destino actual, el factor de urdimbre (velocidad), y si la nave está viajando actualmente. Todo este estado responderá a entradas del usuario.</p>
<p className="p">Therefore, we are going to build an application that touches the most crucial parts of React’s API. In order to keep it fun, we are going to build a simple Star Trek themed ‘space travel video game’. This also reinforces the idea that React’s design decisions are inherited from certain game engines. It will consist of a starship on a star chart of a scaled down version of the Star Trek’s Alpha Quadrant. There is plenty of state to manage here: ship location, current destination, warp factor (speed), and whether the ship is currently traveling. All this state will respond to user input.</p>
<p className="it">A estas alturas, ya hemos pasado por la mayoría de las partes importantes de la API de React. Su huella API es en realidad bastante estrecha en comparación con algunos otros frameworks, pero como dice el proverbio romano: “El zorro tiene muchos trucos. El erizo tiene uno bueno“.</p>
<p className="p">By now, we have already gone through most of the important parts of React’s API. Its API footprint is actually quite narrow compared to some other frameworks, but as the Roman proverb says: “The fox has many tricks. The hedgehog has one good one.”</p>
<p className="it">Vamos a empezar la construcción de nuestro videojuego de Star Trek. Una vez que hallamos terminado, se verá algo como esto:</p>
<p className="p">We are going to get started building our Star Trek video game. Once we are finished, it will look something like this:</p>
<div className="image"><a></a><img src="/static/img001.jpg" width="100%" alt="Image"/></div>
<p className="it">Al final del tutorial, el juego debe hacer un mapa de las estrellas con sistemas de estrellas de colores por la facción, así se renderizará la imagen de una nave espacial en la posición actual de la nave. Debes ser capaz de trazar un camino mediante la selección de un sistema de estrellas en el mapa de las estrellas, o podes buscar un sistema de estrellas bajo el panel “Course Control” en “Helm Control”. Debes ser capaz de establecer el nombre de tu nave y su tripulación haciendo clic en el nombre. Además, debes ser capaz de seleccionar el factor warp para tu nave e involucrar a los motores de warp, que comenzará el movimiento de la nave a su destino actual. Durante el viaje, el panel de “Navigation” mostrará tu actual destino, dirección y posición.</p>
<p className="p">By the end of the tutorial, the game should render a star chart with star systems colored by faction as well render the image of a starship at the current position of the starship. You should be able to chart a course by selecting a star system on the star chart, or you can search a star system under the “Course Control” panel under “Helm Control”. You should be able to set the name of your ship and your crew by clicking on the name. Also, you should be able to select the warp factor for your starship and engage the warp engines, which will begin the movement of the starship to its current destination. During travel, the “Navigation” panel will display your current destination, heading, and position.</p>
<h2>Setup</h2>
<p className="p">Requirements:</p>
<ul>
<li className="p">Git¹⁷</li>
<li className="p">Node.js¹⁸</li>
</ul>
<p className="index">¹⁷https://git-scm.com/downloads</p>
<p className="index">¹⁸https://nodejs.org/en/</p>
<p className="it">- NVM es la forma más fácil de manejar Node. Aquí¹⁹ encontraras sus instrucciones de configuración. A continuación, ejecutá <code>{`nvm
install node && nvm alias default node`}</code>, que instala la versión más reciente de Node.js y establece su terminal para que puedas ejecutar tecleando node. Con NVM podes instalar varias versiones de Node.js y cambiar fácilmente entre ellas.</p>
<p className="p">– NVM is the easiest way to manage Node. Its setup instructions here¹⁹. Then <code>{`nvm
install node && nvm alias default node`}</code>, which installs the latest version of Node.js and sets up your terminal so you can run it by typing node. With nvm you can install multiple versions of Node.js and easily switch between them.</p>
<p className="index">¹⁹https://github.com/creationix/nvm#installation</p>
<p className="p">– New to npm²⁰?</p>
<p className="index">²⁰https://docs.npmjs.com/</p>
<p className="it">Si no lo has hecho, cloná el repositorio²¹ de demostración para este tutorial. Este libro no es sobre la creación de un entorno de desarrollo por lo que es muy recomendable que lo sigas en el repositorio de demostración.</p>
<p className="p">If you have not already done so, clone the demo repository²¹ for this tutorial. This book is not about setting up a development environment so it is highly recommended you follow along in the demo repository.</p>
<p className="index">²¹https://github.com/freddyrangel/react-under-the-hood</p>
<p className="it">Hay dos directorios principales: finished y unfinished. Vos seguirás a lo largo de la Guía unfinished. finished está disponible si estás atascado o deseas saltar por delante. Se advierte sin embargo que copiar y pegar de finished no siempre puede funcionar, ya que representa el estado final de la partida. Si copias el código de finished, es posible que el código dependa de otro código que no va a ser añadido hasta más tarde en el tutorial.</p>
<p className="p">There are two main directories: finished and unfinished. You will be following along in the unfinished directory. finished is available if you are stuck or want to skip ahead. Be warned however that copy and pasting from finished may not always work since it represents the end state of the game. If you copy code from finished, it is possible that code depends on other code that is not going to be added until later in the tutorial.</p>
<p className="it">Dicho esto, seguí adelante y <code>{`cd`}</code> en unfinished y corré <code>{`npm i`}</code>. Esto instalará todas las dependencias necesarias para esta demostración. Una vez que hayas terminado, podes iniciar el servidor mediante la ejecución de <code>{`npm start`}</code> y la navegación a <code>{`localhost:4000`}</code> en tu navegador.</p>
<p className="p">That said, go ahead and <code>{`cd`}</code> into unfinished and run <code>{`npm i`}</code>. This will install all the dependencies required for this demo. Once that is finished, you can start the server by running <code>{`npm start`}</code> and navigating to <code>{`localhost:4000`}</code> in your browser.</p>
<h2>Tooling:</h2>
<p className="it">Un poco acerca de las herramientas. Estamos utilizando webpack para la gestión de todo lo que no sea dependencias. Webpack combina un sistema de construcción como Gulp/Grunt con la funcionalidad de Browserify y tiene plugins para ejecutar un servidor de desarrollo, entre otras muchas cosas. A diferencia de Browserify, webpack entiende más de un sistema de módulos de carga. Para este libro, vamos a utilizar módulos CommonJS.</p>
<p className="p">A little bit about tooling. We are using Webpack for managing everything other than dependencies. Webpack combines a build system like Gulp/Grunt with the functionality of Browserify and has plugins for running a development server, among many other things. Unlike Browserify, Webpack understands more than one module loading system. For this book, we are going to use CommonJS modules.</p>
<p className="it">Estamos utilizando Babel.js para compilar nuestro código JSX, lo que nos permitirá usar ES2015 si quisieramos. Vamos a permanecer lejos de ES2015 para este tutorial, ya que no es entendido universalmente por todos los desarrolladores de JavaScript a partir de hoy. Sin embargo, ES2015 funciona muy bien con React y vale la pena explorarlo por tu cuenta.</p>
<p className="p">We are using Babel.js to compile our JSX code, which would allow us to use ES2015 if we wanted to. We are going to stay away from ES2015 for this tutorial since it is not universally understood by all JavaScript developers as of today. However, ES2015 works really well with React and is worth exploring on your own.</p>
<h2>Hello World</h2>
<p className="it">Vamos a empezar por la creación de un ejemplo simple de “Hola, mundo!”. El punto de entrada a nuestra aplicación está configurado para ser</p>
<p className="p">Let’s start by creating a simple “Hello, World!” example. The entry point to our app is set up to be <code>{`unfinished/app/index.jsx`}</code> so we are going to start there.</p>
<div className="image"><a></a><img src="/static/cod019.jpg" width="100%" alt="Image"/></div>
<p className="it">Una de las primeras cosas que podes notar es que estamos requiriendo un archivo CSS. Webpack te permite solicitar archivos CSS. Esto permite a los desarrolladores el modularizar CSS de la misma manera que podemos modularizar JavaScript. Vamos a hacer eso aquí por conveniencia.</p>
<p className="p">One of the first things you may notice is that we are requiring a CSS file. Webpack allows you to require CSS files. This allows developers to modularize CSS the same way we can modularize JavaScript. We are going to do that here for convenience.</p>
<p className="it">Debajo de eso estamos requiriendo la biblioteca React como se espera, sin embargo, también requerimos ReactDOM. Eso podría ser un poco confuso, pero hay una muy buena razón por la cual React y ReactDOM son  bibliotecas separadas. Bajo el capó, React simplemente mantiene una representación virtual de la interfaz de usuario. Esto significa que React puede abstraer cualquier tipo de interfaz de usuario, no sólo una interfaz de usuario web. React ahora se puede encontrar en las aplicaciones de Android e iOS a través de React Native, además de canvas y hasta en la terminal. Puesto que estamos utilizando una aplicación web de React, tenemos que requerir ReactDOM.</p>
<p className="p">Below that we are requiring the React library as is expected, however we are also requiring ReactDOM. That might be a little confusing but there is a very good reason why React and ReactDOM are separate libraries. Under the hood, React just holds a virtual representation for your UI. This means React can abstract any type of UI, not just a web UI. React can now be found in Android and iOS applications via React Native, we well as canvas and even the terminal. Since we are using a web implementation of React, we need to require ReactDOM.</p>
<p className="it">Estamos creando un <code>{`div`}</code> en el que vamos a hacer nuestra app React. Esto es generalmente una buena práctica. Nos da la flexibilidad de añadir otro tipo de contenido en la página que no sea nuestra app React. En <code>{`ReactDOM.render(<Game />, appNode);`}</code> estamos renderizando nuestro componente <code>{`Game`}</code> en appNode. Por el momento, <code>{`Game`}</code> no existe todavía. Si estás tratando de ver el resultado en el navegador, todo lo que se ve es una pantalla azul en blanco. </p>
<p className="p">We are creating a <code>{`div`}</code> on which we will render our React application. This is generally a good practice. It gives us the flexibility to add other content on the page other than our React application. On <code>{`ReactDOM.render(<Game />, appNode);`}</code> we are rendering our <code>{`Game`}</code> component onto appNode. At the moment, <code>{`Game`}</code> does not exist yet. If you are attempting to view the result in the browser, all you will see is a blank blue screen.</p>
<div className="image"><a></a><img src="/static/cod020.jpg" width="100%" alt="Image"/></div>
<p className="p">Let’s create this component. Create a file under <code>{`unfinished/app/components/Game.jsx`}</code> and add the following:</p>
<p className="it">En este punto, si vas a <code>{`localhost:4000`}</code> deberías ver esto:</p>
<p className="p">At this point, if you navigate to <code>{`localhost:4000`}</code> you should see this:</p>
<p className="it">Esto es algo así como una comprobación previa al vuelo para asegurarte de que todo está configurado correctamente antes de seguir adelante.</p>
<div className="image"><a></a><img src="/static/img002.jpg" width="100%" alt="Image"/></div>
<p className="p">This is something like a pre-flight check to make sure that everything is setup correctly before we move on.</p>
<p className="it">Vamos a hablar sobre lo que está pasando aquí exactamente. En <code>{`Game.jsx`}</code> estamos exportando un componente con una función muy simple <code>{`render()`}</code>. Recordaras que JSX no devuelve elementos DOM reales sino que se transforma en React de API para crear elementos DOM virtuales. En este caso, se convertirá en <code>{`React.createElement('h1',    {},   'Hello,   World!')`}</code>.</p>
<p className="p">Let’s talk about exactly what is going on here. In <code>{`Game.jsx`}</code> we are exporting a component with a very simple <code>{`render()`}</code> function. You may recall that JSX does not return actual DOM element but rather it transforms into React’s API for creating Virtual DOM elements. In this case, it will become <code>{`React.createElement('h1',    {},   'Hello,   World!')`}</code>.</p>
<p className="it">Luego, en <code>{`index.jsx`}</code> vamos a darle <code>{`<Game />`}</code> al DOM. JSX inferirá el nombre de un componente basado en el nombre de la variable que lo contiene. Si cambiamos <code>{`Game`}</code> a <code>{`Cats`}</code> la aplicación lo procesará correctamente.</p>
<p className="p">Then, in <code>{`index.jsx`}</code> we will render <code>{`<Game />`}</code> to the DOM. JSX will infer the name of a component based on the name of the variable that contains it. If we changed <code>{`Game`}</code> to <code>{`Cats`}</code> the application would still render correctly.</p>
<h2>Star Chart</h2>
<p className="it">Ahora vamos a empezar por la renderización de un mapa de las estrellas. Los datos del sistema de la estrella ya están disponible para vos en <code>{`unfinished/app/data/StarData.js`}</code></p>
<p className="p">Now let’s begin by rendering a star chart. Star system data is already available for you under <code>{`unfinished/app/data/StarData.js`}</code>.</p>
<p className="it">Vamos a hacer el gráfico de estrellas con SVG. Hay algunas razones muy buenas para esto. SVG nos permite dibujar círculos para los sistemas estelares. Las bibliotecas de gráficos como D3.js también usan SVG, lo que nos permite usar D3 más tarde si queremos cambiar el tamaño del gráfico. Además, React admite la mayoría de los elementos SVG, excepto por algunas excepciones key.</p>
<p className="p">We are going to render the star chart using SVG. There are a few really good reasons for this. SVG allows us to draw circles for star systems. Charting libraries like D3.js also use SVG, allowing us to use D3 later if we want to resize the chart. In addition, React supports most SVG elements, except for a few key exceptions.</p>
<p className="it">Vamos a crear un elemento SVG que tiene 1000px X 600px. A continuación, vamos a trazar sobre todos los datos del sistema de estrella y hacer un círculo SVG (que representa el sistema de estrellas) y el elemento de texto con el nombre del sistema. A continuación, vamos a utilizar la jurisdicción del sistema de estrellas como el nombre de la clase del círculo de modo que podemos colorear fácilmente cada sistema estelar.</p>
<p className="p">We are going to create an SVG element that is 1000px X 600px. Then, we are going to map over all the star system data and render an SVG circle (representing the star system) and text element with the name of the system. Then, we will use the jurisdiction of the star system as the circle’s class name so we can easily color each star system.</p>
<p className="p">Let’s create our StarChart component under <code>{`unfinished/app/components/StarChart.jsx`}</code>.</p>
<div className="image"><a></a><img src="/static/cod021.jpg" width="100%" alt="Image"/></div>
<p className="it">Es posible que te preguntes por qué estamos usando className en lugar de class para establecer una clase de elementos. Esto se debe a que class es una palabra reservada en JavaScript. Como JSX es realmente sólo JavaScript, no podemos usar class. Además, className es la API DOM para establecer y recuperar la class de un elemento DOM en JavaScript, por lo que React utiliza className para mantener la coherencia.</p>
<p className="p">You may be wondering why we are using className instead of class to set an elements class. That is because class is a reserved word in JavaScript. Since JSX is really just JavaScript, we cannot use class. Also, className is the DOM API for setting and retrieving the class of a DOM element in JavaScript, so React uses className for consistency.</p>
<p className="it">Dentro de nuestro componente <code>{`StarChart`}</code>, renderizamos un componente <code>{`Star`}</code> cuya tarea será la de renderizar las estrellas. Estamos pasando <code>{`StarData`}</code> como props a <code>{`Stars`}</code>.</p>
<p className="p">Within our <code>{`StarChart`}</code> component, we are rendering a <code>{`Star`}</code> component whose job it will be to render the stars. We are passing <code>{`StarData`}</code> as props to <code>{`Stars`}</code>.</p>
<p className="it">Vamos a seguir adelante y crear nuestro componente <code>{`Stars`}</code></p>
<p className="p">Let’s go ahead and create our <code>{`Stars`}</code> component</p>
<div className="image"><a></a><img src="/static/cod022a.jpg" width="100%" alt="Image"/></div>
<p className="it">Vamos a echar un vistazo a nuestra nueva función <code>{`render()`}</code>. La <code>{`g`}</code> en SVG es un recipiente utilizado para un grupo. Es una lata pensarlo como algo parecido a un <code>{`div`}</code>, pero no es exactamente lo mismo. Aquí estamos usando <code>{`g`}</code> en forma muy similar a como usaríamos un <code>{`div`}</code>, para contener los elementos relacionados en un solo elemento padre. Dentro de este <code>{`g`}</code> estamos mapeando sobre nuestra <code>{`starData`}</code> (que fue aprobada en el <code>{`starData`}</code> parent como props) haciendo un círculo y el elemento de texto para cada sistema de estrellas. Vamos a echar un vistazo a nuestra nueva función <code>{`render()`}</code>. En SVG la <code>{`g`}</code> es un recipiente utilizado para objetos de grupo. Puede ser pensado como algo parecido a un <code>{`div`}</code>. Aquí estamos usando <code>{`g`}</code> de una manera muy similar a como usaríamos un <code>{`div`}</code>, para contener los elementos relacionados en un solo elemento padre. Dentro de este <code>{`g`}</code>, encontramos un conjunto de keys con una expresión de JavaScript. Las keys en JSX es lo que nos permite ejecutar expresiones de JavaScript de una manera muy similar a los Handlebars.</p>
<p className="p">Let’s take a look at our new <code>{`render()`}</code> function. The <code>{`g`}</code> in SVG is a container used to group. It Â can be thought of as something akin to a <code>{`div`}</code> but not quite the same. Here we are using <code>{`g`}</code> in very similar way we would use a <code>{`div`}</code>, to contain related elements in one parent element. Inside of this <code>{`g`}</code> we are mapping over our <code>{`starData`}</code> (which was passed in by the parent <code>{`StarChart`}</code> as a prop) and rendering a circle and text element for each star system. Let’s take a look at our new <code>{`render()`}</code> function. The <code>{`g`}</code> in SVG is a container used to group objects. It can be thought of as something akin to a <code>{`div`}</code>. Here we are using <code>{`g`}</code> in a very similar way we would use a <code>{`div`}</code>, to contain related elements in one parent element. Within this <code>{`g`}</code>, we find a set of curly braces with a JavaScript expression. Curly braces is JSX which allows us to execute JavaScript expressions in a manner very similar to Handlebars.</p>
<p className="it">Allí, estamos mapeando sobre nuestra <code>{`starData`}</code> (que fue aprobada en el mapa <code>{`StarChart`}</code> como props), que pasa a una función llamada <code>{`renderStars`}</code>. Esta función devolverá un círculo SVG y un elemento de texto con el nombre del sistema. Como se ha mencionado en un capítulo anterior, una lista de elementos relacionados debe tener una key única como un atributo, lo que permite a React a mejorar en gran medida el rendimiento de la transformación de una lista grande. En este caso, estamos utilizando el índice del sistema de estrellas dentro de la array.</p>
<p className="p">There, we are mapping over our <code>{`starData`}</code> (which was passed in by the parent <code>{`StarChart`}</code> as a prop), passing a function called <code>{`renderStars`}</code>. This function will return an SVG circle and a text element with the name of the system. As mentioned in a prior chapter, a list of sibling elements should have a unique key as an attribute, allowing React to greatly improve the performance of transforming a large list. Here, we are using the index of the star system within the array.</p>
<p className="it">Además, nuestra función <code>{`renderStars`}</code> crea los atributos de los elementos del círculo y del texto en un objeto. Al hacerlo de esta manera, podemos utilizar el spread operator²² para expandir ese objeto en argumentos utilizando la ... sintaxis. El spread operator se apoya en JSX y es compatible con las arrays en ES2015. También se propone para los objetos en ES2016. La expresión equivalente sería algo como esto:</p>
<p className="p">In addition, our <code>{`renderStars`}</code> function is setting up the attributes for our circle and text elements in an object. By doing it this way, we can use the spread operator²² to expand that object into arguments using the ... syntax. The spread operator is supported by JSX and is supported for arrays in ES2015. It is also proposed for objects in ES2016. The equivalent expression would look something like this:</p>
<p className="p">²²https://facebook.github.io/react/docs/jsx-spread.html</p>
<div className="image"><a></a><img src="/static/cod023.jpg" width="100%" alt="Image"/></div>
<p className="it">Pero con el spread operator, podemos configurar fácilmente los argumentos a favor de nuestro elemento en otro lugar y pasarlo con una sintaxis mucho más limpia.</p>
<p className="p">But with the spread operator, we can easily set up the arguments for our element elsewhere and pass it in with a much cleaner syntax.</p>
<p className="it">En este punto, es posible que te hayas preguntado por qué estamos envolviendo <code>{`starData`}</code> en el elemento <code>{`g`}</code> en nuestra función de <code>{`render()`}</code>. Parece innecesario. De hecho, es muy necesario - no va a funcionar sin él. Desde React resúmenes del DOM a través de JavaScript, no podemos devolver los elementos de hermanos sin ella envuelta en un elemento padre. Esta es una limitación de la lengua desde JavaScript funciones sólo tienen un valor de retorno. Por lo tanto, nada volvió en nuestra función de <code>{`render()`}</code> debe parecerse a un árbol con un nodo principal en la parte superior. Sin este elemento <code>{`g`}</code>, nuestro componente dará lugar a un error.</p>
<p className="p">At this point, you may have asked yourself why are we wrapping starData in a <code>{`g`}</code> element in our <code>{`render()`}</code> function. It seems unnecessary. In fact, it’s very much necessary – it will not work without it. Since React abstracts the DOM via JavaScript, we cannot return sibling elements without it wrapped in a parent element. This is a limitation of the language since JavaScript functions have only one return value. Therefore, anything returned in our <code>{`render()`}</code> function must resemble a tree with one parent node at the very top. Without this <code>{`g`}</code> element, our component will result in an error.</p>
<p className="it">Por último, tenemos que renderizar el <code>{`StarChart`}</code> en el componente <code>{`Game`}</code>, así como el <code>{`starData`}</code>.</p>
<p className="p">Finally, we need to render the <code>{`StarChart`}</code> in the <code>{`Game`}</code> component, as well as the <code>{`starData`}</code>.</p>
<div className="image"><a></a><img src="/static/cod024.jpg" width="100%" alt="Image"/></div>
<p className="it">En función del <code>{`render()`}</code> de Game, vamos a obtener todos los datos star y luego pasarlos a StarChart como props. Esta es la manera ideal de construir un componente React. Se empieza con el componente secundario que desea construir y requieren datos que usted no tiene, sin embargo, y luego en el componente de los padres, encontrar la manera de obtener los datos para el componente secundario. A este respecto, es similar al TDD (desarrollo basado en pruebas) en la que usted está comenzando con las pruebas para el código que uno desearía tener, a continuación, se escribe el código en sí mismo.</p>
<p className="p">In Game’s <code>{`render()`}</code> function, we are going to get all the star data and then pass that into the StarChart as props. This is the ideal way of building a React component. You start with the child component you want to build and require data that you don’t have yet, and then in the parent component, figure out how to get that data to the child component. In that respect, it’s similar to TDD (Test-Driven Development) in that you’re starting with tests for the code you wish you had, then you write the code itself.</p>
<p className="it">Ahora bien, si echamos un vistazo a nuestro navegador, debemos ver el mapa de las estrellas:</p>
<p className="p">Now if we take a look at our browser, we should see the star chart:</p>
<div className="image"><a></a><img src="/static/img003.jpg" width="100%" alt="Image"/></div>
<p className="it">Los diferentes colores representan diferentes facciones en el Universo de Star Trek. En caso de que se preguntan:</p>
<p className="p">The different colors represent different factions in the Star Trek Universe. In case you are wondering:</p>
<ul>
<li>Federation: Aqua</li>
<li>Romulan  Empire: Red</li>
<li>Garidian Republic: Pink</li>
<li>Elorg Bloc: Purple</li>
<li>Cardassian Union: Teal</li>
<li>Tzenkethi Coalition: Orange</li>
<li>Klingon Empire: Violet</li>
<li>Independent:  Grey</li>
</ul>
<h2>Starship</h2>
<p className="it">Ahora que tenemos un mapa de las estrellas, podemos crear una nave y hacer que su posición del mapa. Vamos a crear un constructor para un buque en <code>{`unfinished/app/data/Ship.js`}</code>.</p>
<p className="p">Now that we have a star chart, we can create a ship and render its position of the map. Let’s create a constructor for a ship in <code>{`unfinished/app/data/Ship.js`}</code>.</p>
<div className="image"><a></a><img src="/static/cod026.jpg" width="100%" alt="Image"/></div>
<p className="it">Ahora vamos a crear esta nave en <code>{`Game.jsx`}</code> y pasarlo a nuestro <code>{`StarChart`}</code>.</p>
<p className="p">Now let’s create this ship in <code>{`Game.jsx`}</code> and pass it down to our <code>{`StarChart`}</code>.</p>
<div className="image"><a></a><img src="/static/cod200.jpg" width="100%" alt="Image"/></div>
<p className="it">Una vez más, <code>{`getInitialState`}</code> se puede considerar un método constructor para una React componente parecido a una clase en la programación orientada a objetos tradicionales. Aquí podemos establecer el estado inicial del componente en su primer render. Recordá, los componentes React manejan su propio estado interno. Idealmente, queres poner en los props tantos datos como sea posible, pero los datos que necesitas cambiar o inicializado alguna manera probable que se colocará en el estado. Para acceder a los datos de la nave, que llamamos <code>{`this.state.ship`}</code>. Pasaremos a esa nave <code>{`StarChart`}</code> como props. Si alguna vez necesitamos acceder a la nave en <code>{`StarChart`}</code> o cualquier otro componente secundario directo del juego, podemos tener acceso a ella al pasar por esos componentes como props.</p>
<p className="p">Again, <code>{`getInitialState`}</code> can be considered a constructor method for a React component much like a class in traditional OOP. Here we can set the initial state of the component on its very first render. Remember, React components manage their own internal state. Ideally, you want to put as much data into props as possible, but data that needs to change or initialized somehow will probably be placed in state. To access the ship data, we call <code>{`this.state.ship`}</code>. We will pass that ship to <code>{`StarChart`}</code> as props. If we ever need to access the ship in <code>{`StarChart`}</code> or any other direct child component of <code>{`Game`}</code>, we can have access to it by passing into those components as props.</p>
<div className="image"><a></a><img src="/static/cod201.jpg" width="100%" alt="Image"/></div>
<p className="it">La única adición de este componente es el componente <code>{`StarshipRenderer`}</code> que será el encargado de encontrar la manera de renderizar una nave espacial. Si tuviéramos varias naves, podríamos volver a utilizar este componente de la renderización de estas naves. <code>{`StarChart`}</code> tiene acceso a la nave como props, que también pasará a la nave <code>{`StarshipRenderer`}</code> como props. Podemos acceder a los props a través de <code>{`this.props`}</code>.</p>
<p className="p">The only addition to this component is the <code>{`StarshipRenderer`}</code> component which will be in charge of figuring out how to render a starship. If we had multiple ships, we could reuse this component to render those ships. <code>{`StarChart`}</code> has access to the ship as props, which will also pass ship to <code>{`StarshipRenderer`}</code> as props. We can access props via <code>{`this.props`}</code>.</p>
<p className="it">Recordá, los props deben ser tratados como inmutables. En el componente de <code>{`StarChart`}</code>, no hay un estado que hablar. Es un componente sin estado. Es básicamente una función idempotente. Dados ciertos datos, se garantiza que devuelve siempre el mismo valor. Ahora vamos a crear nuestro componente <code>{`StarshipRenderer`}</code> en <code>{`unfinished/app/components/StarshipRenderer.jsx`}</code>:</p>
<p className="p">Remember, props should be treated as immutable. In the <code>{`StarChart`}</code> component, there is no state to speak of. It is a stateless component. It is basically an idempotent function. Given certain data, it is guaranteed to always return the same value. Now let’s create our <code>{`StarshipRenderer`}</code> component in <code>{`unfinished/app/components/StarshipRenderer.jsx`}</code>:</p>
<div className="image"><a></a><img src="/static/cod202.jpg" width="100%" alt="Image"/></div>
<p className="it">El objetivo de este tutorial es mostrar cómo React trabaja bajo el capó y para darte como desarrollador una profunda comprensión de dónde funcionan las cosas y cuando no lo hacen. React soporta todas las etiquetas HTML y la mayoría de las etiquetas SVG. Una etiqueta de SVG, que necesitamos, pero no se admite es una etiqueta de imagen SVG. (Actualización: como en React 0.14, el elemento de imagen SVG es ahora compatible).</p>
<p className="p">The point of this tutorial is to show how React works under the hood and to give you as the developer a deep understanding of where things work and when they do not. React supports all HTML tags and most SVG tags. One SVG tag which we need but isn’t supported is an SVG image tag. (Update: as of React 0.14, the SVG image element is now supported).</p>
<p className="it">Bajo el capó, React utiliza <code>{`setInnerHTML`}</code> para actualizar un nodo DOM. Normalmente, React resúme esto desde el desarrollador de aplicaciones. Pero en este caso, tenemos que decirle a React cómo renderizar una imagen SVG. React te da la capacidad de hacer eso con <code>{`dangerouslySetInnerHTML`}</code>, nombre muy apropiado para advertir al desarrollador que su aplicación puede potencialmente sufrir un ataque de cross-site scripting. Esto es seguro de usar, siempre y cuando no se derive el valor de la entrada del usuario a través de <code>{`innerHTML`}</code> no desinfectado. <code>{`dangerouslySetInnerHTML`}</code> requiere un objeto con html como la clave y su cadena de elementos DOM como el valor. Echa un vistazo a este artículo para obtener más información: Conjunto peligrosamente <code>{`innerHTML`}</code>²³</p>
<p className="p">Under the hood, React uses <code>{`setInnerHTML`}</code> to update a DOM node. Normally, React abstracts this from the application developer. But in this case, we need to tell React how to render an SVG image. React gives you the ability to do that with <code>{`dangerouslySetInnerHTML`}</code>, aptly named to warn the developer that you can potentially open your application to a cross-site scripting attack. This is safe to use as long as you’re not deriving the value of the <code>{`innerHTML`}</code> via unsanitized user input. <code>{`dangerouslySetInnerHTML`}</code> requires an object with html as the key and your DOM element string as the value. Check out this article to learn more: Dangerously Set <code>{`innerHTML`}</code>²³</p>
<p className="index">²³https://facebook.github.io/react/tips/dangerously-set-inner-html.html</p>
<p className="it">Todo lo que se requiere es crear una cadena de imagen y obtener las coordenadas en base a la posición de la nave. Estamos haciendo abstracción exactamente cómo nos encontramos con esta cadena, debido a la complicada trigonometría es necesario, pero si sos curioso se puede echar un vistazo a cómo lo estamos haciendo.</p>
<p className="p">All that is required is to create an image string and derive the coordinates based on the ship position. We are abstracting exactly how we come up with this string because of the complicated trigonometry necessary, but you can take a look at how we are doing it if you are curious.</p>
<p className="it">Como notas al margen, React ama usar los nombres y las variables del método con palabras fuertes para advertir a los desarrolladores. Aquí es una divertida desde el código fuente React: SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_- BE_FIRED²⁴</p>
<p className="p">As a side note, React loves to use strongly worded method names and variables to warn developers. Here is a funny one from the React source code: SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_- BE_FIRED²⁴</p>
<p className="index">²⁴https://github.com/facebook/react/blob/b2ca3349c27b57b1e9462944cbe4aaaf76783d2b/src/React.js#L67</p>
<p className="it">Ahora nuestra linda pequeña nave está en el mapa de las estrellas:</p>
<p className="p">Now our cute little ship is on the star chart:</p>
<div className="image"><a></a><img src="/static/img093.jpg" width="100%" alt="Image"/></div>
<h2>Ship Info</h2>
<p className="it">Es muy bueno que estemos mostrando una representación exacta del Cuadrante Alfa con una primera versión de la USS Enterprise. Sin embargo, queremos actualizar el nombre de nuestra nave, junto con el de los miembros de nuestra tripulación.</p>
<p className="p">It’s great that we are displaying an accurate representation of the Alpha Quadrant with an early version of the USS Enterprise. However, we want to update the name of our starship, along with the members of our crew.</p>
<p className="it">Vamos a comenzar la creación de un componente que nos permite hacer precisamente eso. Vamos a empezar por la renderización de un componente <code>{`HelmControl`}</code> en Game.</p>
<p className="p">Let’s begin creating a component allowing us to do just that. We are going to start by rendering a <code>{`HelmControl`}</code> component in Game.</p>
<div className="image"><a></a><img src="/static/cod203.jpg" width="100%" alt="Image"/></div>
<p className="it">Este es un buen lugar para hablar acerca de dónde colocar la lógica del negocio. Un patrón es útil en React “componentes smart y dumb”. En el núcleo de este patrón está la separación de componentes entre los que sostienen el estado vs los que son básicamente funciones simplemente idempotentes. En el corazón de esta aplicación está Ship que contiene todo el estado de la nave: donde está, a dónde va, quienes son los miembros de la tripulación, y cuál es su velocidad actual. Los componentes hijos no deben saber cómo actualizar este estado - únicamente Game sabrá cómo hacerlo. Game será el componente “smart”, mientras que la mayoría de los componentes hijos serán “dumb”. Para actualizar el estado de ship, los componentes hijos llamarán a las funciones que se pasan inicialmente por debajo de Game.</p>
<p className="p">This is a good place to talk about where to place business logic. A useful pattern in React is “smart and dumb components”. At the core of this pattern is separating components between those that hold state vs those that are basically just idempotent functions. At the heart of this application is the Ship which contains all the state for the starship: where it is, where it’s going, who are the crew members, and what is its current speed. Child components should not know how to update this state – only Game will know how to do that. Game will be the “smart” component while most child components will be “dumb”. To update ship state, child components will call on functions that are originally passed down from Game.</p>
<p className="it">Por lo tanto, estamos creando un nuevo método de Game llamado <code>{`updateShipInfo()`}</code>. Este método se pasa a <code>{`HelmControl`}</code> como props para que pueda actualizar información de la nave. Dentro de <code>{`updateShipInfo()`}</code> estamos tomando en nueva información como un argumento y actualizamos nuestro estado ship con la nueva información a través de <code>{`setstate()`}</code>. Este notificará a React de un cambio en nuestro modelo de datos y desencadenará una re-renderización del Game y de todos sus hijos.</p>
<p className="p">Therefore, we are creating a new method on Game called <code>{`updateShipInfo()`}</code>. This method is passed to <code>{`HelmControl`}</code> as props so that it can update ship information. Within <code>{`updateShipInfo()`}</code> we are taking in new info as an argument and updating our ship state with the new info via <code>{`setstate()`}</code>. This will notify React of a change in our data model and trigger a re-render of Game and all of its children.</p>
<p className="it">Como se mencionó antes, todas las abstracciones de fugas, y esto es un lugar donde suceden las fugas DOM Virtuales. Tenemos que notificar a nuestro sistema que nuestro estado ha cambiado. Si realmente JavaScript fuera reactivo, el valor de nuestro nuevo estado se actualizaría automáticamente. Pero como casi todo en la vida, hay algunas cosas que son siempre casí una victoria completa - todo es una solución de compromiso. Aunque tenemos que decirle a React explícitamente sobre los cambios de estado, sabemos que una vez que el estado cambia nuestra aplicación va a parecerse a un sistema estático. Toda nuestra aplicación es esencialmente una máquina de estado, con todos nuestros componentes ajustandose automáticamente en su lugar cuando el estado del mundo ha cambiado.</p>
<p className="p">As was mentioned before, all abstractions leak, and this is one place where the Virtual DOM leaks. We have to notify our system that our state has changed. If JavaScript were truly reactive, the value of our new state would be updated automatically. But like most things in life, there are few things that are always a complete win – everything is a tradeoff. While we do have to explicitly tell React about state changes, we know that once that state changes our app will resemble a static system. Our whole app is essentially a state machine, with all our components automatically snapping into place when the state of the world has changed.</p>
<p className="p">Let’s create <code>{`HelmControl`}</code> in <code>{`unfinished/app/components/HelmControl.jsx`}</code>:</p>
<div className="image"><a></a><img src="/static/cod204.jpg" width="100%" alt="Image"/></div>
<p className="it">Estamos pasando el ship a <code>{`ShipInfo`}</code>, pero también estamos pasando en el método <code>{`updateShip`}</code>. Puesto que los datos en React son unidireccionales, sólo se producen cambios en <code>{`this.state.ship`}</code> donde vive ese estado, que en este caso es el componente del Game. Por lo tanto, tenemos que pasar a un método para nuestros componentes hijos si queremos actualizar el estado.</p>
<p className="p">We are passing the ship to <code>{`ShipInfo`}</code>, but we are also passing in the <code>{`updateShip`}</code> method as well. Since data in React is unidirectional, changes to <code>{`this.state.ship`}</code> can only occur where that state lives, which in this case is the Game component. Therefore, we need to pass a method to our child components if we want to update the state.</p>
<p className="p">Let’s create <code>{`ShipInfo`}</code> in <code>{`unfinished/app/components/ShipInfo.jsx`}</code>:</p>
<div className="image"><a></a><img src="/static/cod205.jpg" width="100%" alt="Image"/></div>
<p className="it">Echando un vistazo a nuestra nueva función <code>{`render()`}</code>, podemos ver que estamos utilizando <code>{`renderElements()`}</code> para averiguar cómo renderizar toda la información de la nave. <code>{`renderElements()`}</code> crea una array de keys de la “información” del objeto, y luego Maps a través de ellos, devolviendo <code>{`EditableElement`}</code>. Este es un componente que puede mostrar un valor ya sea o se pueden editar en línea, pero se necesita una función a llamar cuando se termina la edición. Por lo tanto, estamos pasando a cada <code>{`EditableElement`}</code> el valor que queremos que se muestre y un controlador de eventos <code>{`onEdit`}</code>, así como un atributo key. Como se mencionó antes, la lista de elementos relacionados en React necesita un atributo key por razones de rendimiento. Estamos utilizando el índice de la array “keys” para proporcionar ese identificador único.</p>
<p className="p">Taking a look at our new <code>{`render()`}</code> function, we can see we are using <code>{`renderElements()`}</code> to figure out how to render all the ship information. <code>{`renderElements()`}</code> creates an array of keys from the “info” object, and then maps over them, returning <code>{`EditableElement`}</code>. This is a component that can either display a value or can be edited inline but will need a function to call when editing is finished. Therefore, we are passing each <code>{`EditableElement`}</code> the value we want it to display and an <code>{`onEdit`}</code> event handler, as well as a key attribute. As mentioned before, list of sibling elements in React need a key attribute for performance reasons. We are using the index of the “keys” array to provide that unique identifier.</p>
<p className="it">Si estás especialmente atento, te habrás dado cuenta de que cuando pasamos <code>{`updateShipInfo()`}</code> de Game a <code>{`HelmControl`}</code> a <code>{`ShipInfo`}</code>, no nos atamos el valor de este a pesar de que el valor de esto habría cambiado por el momento en que llegó <code>{`shipInfo`}</code>. React autobinding  maneja esto por vos de una manera performatica por lo que no tenes que obligarlo a esto en todas partes. Sin embargo, estamos utilizando bind en el controlador de eventos <code>{`onEdit`}</code> para que podamos enlazar el valor del primer argumento para <code>{`updateInfo()`}</code>, por lo que cuando <code>{`updateInfo()`}</code> finalmente es llamada en <code>{`EditableElement`}</code> todo lo que necesitamos hacer es pasar el nuevo valor de entrada de usuario obtenido y llamar a <code>{`updateInfo()`}</code>. En un momento veremos cómo funciona en <code>{`EditableElement`}</code></p>
<p className="p">If you are especially observant, you may have noticed that when we passed <code>{`updateShipInfo()`}</code> from Game to <code>{`HelmControl`}</code> to <code>{`ShipInfo`}</code>, we did not bind the value of this even though the value of this would have changed by the time it reached <code>{`shipInfo`}</code>. React’s autobinding of this handles this for you in a performant way so you don’t have to bind this everywhere. However, we are using bind in the <code>{`onEdit`}</code> event handler so we can bind the value of the first argument to <code>{`updateInfo()`}</code>, so that when <code>{`updateInfo()`}</code> is finally called in <code>{`EditableElement`}</code> all we need to do is pass the new value gathered from user input and call <code>{`updateInfo()`}</code>. We will see how that works in <code>{`EditableElement`}</code> in a moment.</p>
<p className="p">Let’s create our missing <code>{`EditableElement`}</code> in <code>{`unfinished/app/components/EditableElement.jsx`}</code>:</p>
<div className="image"><a></a><img src="/static/cod206.jpg" width="100%" alt="Image"/></div>
<p className="it">El propósito de este componente es ver como un componente secundario reutilizable para la renderización de un elemento DOM puede ser editado en línea por la entrada del usuario. Este componente tiene dos estados: la edición y la no edición. Cuando la edición es falsa, se renderizará el valor que pasa en ella. Al editar true, va a proporcionar un campo de entrada, que estará atento a la tecla “Enter” y para hacer clic fuera del campo de entrada, que a su vez desencadenará una actualización del valor de entrada. Cuando se abandona el estado “edición”, se llamará a la función <code>{`onEdit()`}</code> que fue aprobada en él como props de su componente principal.</p>
<p className="p">The purpose of this component is as a reusable child component for rendering a DOM element that can be edited inline by user input. This component has two states: editing and non-editing. When editing is false, it will just render the value passing into it. When editing is true, it will render an input field which will watch for the “Enter” key and for clicking out of the input field, which will then trigger an update of the input value. When it leaves the “editing” state, it will call the <code>{`onEdit()`}</code> function that was passed into it as props from its parent component.</p>
<p className="it">Ahora deberíamos tener nuestro primer componente que realmente actualiza el estado. Si te desplazas al navegador y lo actualizas, deberías ver esto:</p>
<p className="p">Now we should have our first component that actually updates state. If you navigate to the browser and refresh, you should see this:</p>
<div className="image"><a></a><img src="/static/img094.jpg" width="100%" alt="Image"/></div>
<h2>Navigation</h2>
<p className="it">Estamos haciendolo bastante bien en este punto, sin embargo, ahora queremos empezar a preparar el terreno para el viaje espacial. Queremos ser capaces de hacer clic en un sistema de estrellas y comprometer a nuestros motores de curvatura. En primer lugar, vamos a renderizar un componente que mostrará los datos de navegación al usuario. Vamos a abrir <code>{`HelmControl`}</code> y añadir un componente <code>{`NavigationDashboard`}</code>.</p>
<p className="p">We are doing pretty well at this point, however now we want to get started with laying the groundwork for space travel. We want to be able to click on a star system and engage our warp engines. First, let’s render a component that will display navigational data to the user. Let’s open <code>{`HelmControl`}</code> and add a <code>{`NavigationDashboard`}</code> component.</p>
<div className="image"><a></a><img src="/static/cod207.jpg" width="100%" alt="Image"/></div>
<p className="it">Estamos añadiendo esencialmente sólo dos líneas de código. Estamos requiriendo un archivo <code>{`NavigationDashboard`}</code>, y luego haciendo un nuevo componente <code>{`NavigationDashboard`}</code>. Nada nuevo.</p>
<p className="p">We are essentially adding just two lines of code. We are requiring a <code>{`NavigationDashboard`}</code> file, and then rendering a new <code>{`NavigationDashboard`}</code> component. Nothing new.</p>
<p className="p">Let’s  create  this  new  component  in <code>{`unfinished/app/components/NavigationDashboard.jsx`}</code>:</p>
<div className="image"><a></a><img src="/static/cod208.jpg" width="100%" alt="Image"/></div>
<p className="it">Observá que <code>{`NavigationDashboard`}</code> está completamente sin estado. Todos los datos que le da de comer siempre devolverán el mismo resultado. Queremos que muchos de nuestros componentes se parescan a este patrón tanto como sea posible.</p>
<p className="p">Notice that <code>{`NavigationDashboard`}</code> is completely stateless. Whatever data you feed it will always return the same outcome. We want as many of our components to resemble this pattern as much as possible.</p>
<p className="it">Cada vez que cambian nuestros datos de ship, se vuelve a calcular el título usando algunas funciones de utilidad en virtud de nav. Hay un poco de trigonometría que va a hacer este tipo de juegos. Este libro no se trata de matemáticas en la escuela, por lo que los cálculos complicados necesarios para hacer este trabajo se abstraen para vos. Vamos a utilizar navegación para calcular el rumbo de la nave en lugar de almacenar en caché los datos de la nave, lo que reduce la probabilidad de errores. Este tipo de cálculos son bastante baratos en JavaScript.</p>
<p className="p">Whenever our ship data changes, we will recalculate the heading using some utility functions under nav. There is quite a bit of trigonometry that goes into making these kinds of games. This book is not about high school math, so the complicated math needed to make this work is abstracted for you. We will use nav to calculate the heading of the ship rather than caching it in the ship data, thereby reducing the likelihood of bugs. These kinds of calculations are fairly cheap in JavaScript.</p>
<p className="it">Si navegamos a <code>{`localhost:4000`}</code> deberíamos ver esto:</p>
<p className="p">If we navigate to<code>{` localhost:4000 `}</code>we should see this:</p>
<div className="image"><a></a><img src="/static/img095.jpg" width="100%" alt="Image"/></div>
<h2>Charting a New Course</h2>
<p className="it">Ahora que tenemos una manera de ver nuestros datos de navegación, podemos empezar a trabajar en la actualización del destino de nuestra nave. Queremos ser capaces de hacer clic en un sistema de estrellas y actualizar automáticamente el destino.</p>
<p className="p">Now that we have a way to see our navigation data, we can start working on updating the destination of our starship. We want to be able to click on a star system and automatically update the destination.</p>
<p className="it">Vamos a crear una función de actualización de nuestro destino en Game, que pasaremos a nuestro StarChart:</p>
<p className="p">Let’s create a function for updating our destination in Game which we will pass to our StarChart:</p>
<div className="image"><a></a><img src="/static/cod209.jpg" width="100%" alt="Image"/></div>
<p className="it">StarChart ahora recibe <code>{`updateDestination()`}</code>, que con el tiempo se puede conectar a cada sistema de estrellas. Recordá, React implementa un sistema de eventos sintético; lo que significa que a pesar de que tenemos más de 100 sistemas de estrellas, no estamos teniendo un impacto en el rendimiento mediante la fijación de detectores de eventos para cada sistema. Todos estos detectores de eventos sólo existen en la memoria.</p>
<p className="p">StarChart now receives <code>{`updateDestination()`}</code> which it will eventually be attached to each star system. Remember, React implements a synthetic event system; meaning that even though we have over 100 star systems, we are not taking a performance hit by attaching event listeners to each system. All these event listeners only exist in memory.</p>
<p className="it">Vamos a abrir StarChart y pasarle <code>{`updateDestination()`}</code> para Stars:</p>
<p className="p">Let’s open up StarChart  and pass <code>{`updateDestination()`}</code> to Stars:</p>
<div className="image"><a></a><img src="/static/cod082.jpg" width="100%" alt="Image"/></div>
<p className="it">Por último, vamos a usar <code>{`updateDestination()`}</code> como un gestor de eventos <code>{`onClick`}</code> en <code>{`Stars.jsx`}</code>:</p>
<p className="p">Finally, let’s use <code>{`updateDestination()`}</code> as an <code>{`onClick`}</code> event handler in <code>{`Stars.jsx`}</code>:</p>
<div className="image"><a></a><img src="/static/cod083.jpg" width="100%" alt="Image"/></div>
<p className="it">Ahora al hacer clic en el nombre de un sistema de estrellas, tu nave espacial se enfrentará a la dirección del sistema de estrellas y <code>{`NavigationDashboard`}</code> reflejará su nuevo destino y el rumbo. Además, <code>{`ShipRenderer`}</code> girará la imagen de la nave espacial basandose en el nuevo rumbo de la nave espacial.</p>
<p className="p">Now when you click the name of a star system, your starship will face the direction of the star system and <code>{`NavigationDashboard`}</code> will reflect your new destination and heading. Also, <code>{`ShipRenderer`}</code> will rotate the starship image based on the new heading on the starship.</p>
<h2>Warp Drive Controls</h2>
<p className="it">Ahora que podemos actualizar el destino de nuestra nave, podemos empezar a trabajar en los controles de nuestro motor de curvatura. Hay algunas cosas a considerar aquí. Antes de crear un componente <code>{`WarpDriveControls`}</code> que es el encargado de mostrar la interfaz de usuario para los controles de motor de curvatura, tenemos que crear la lógica del negocio necesaria para mover nuestra nave espacial. Cuando el motor de curvatura se dedica, vamos a utilizar un intervalo básico que actualizará la posición de la nave espacial en función de su destino y la velocidad actual cada 30 milisegundos.</p>
<p className="p">Now that we can update the destination of our starship, we can begin working on controls for our warp drive. There are a few things to consider here. Before we create a <code>{`WarpDriveControls`}</code> component that is responsible for rendering the UI for the warp drive controls, we need to create the business logic necessary to move our starship. When the warp drive is engaged, we are going to use a basic interval that will update the starship’s position based on its destination and current speed every 30 milliseconds.</p>
<p className="it">Vamos a utilizar un mixin React para ayudar a administrar nuestros intervalos. Los mixins son similares a los Ruby modules o Sass mixins que son una forma de reutilización de herencia/código. Se puede crear un mixin con funciones que a continuación se puede incluir o “mixar” a otros componentes React. Es útil para el comportamiento que tiene preocupaciones transversales, tales como el establecimiento y la limpieza de intervalos. Sin embargo, son un poco controvertidos ya que este tipo de herencia no es realmente un concepto JavaScript. También, sin duda han sido objeto de abusos en otros idiomas / frameworks como Ruby on Rails donde no es claro cómo varios módulos / mixins están interactuando entre sí. Dicho esto, si se usan con moderación y deliberadamente, pueden ser una poderosa herramienta para la reutilización de código.</p>
<p className="p">We are going to use a React mixin to help manage our intervals. Mixins are similar to Ruby modules or Sass mixins in that they’re a form of inheritance / code reuse. You can create a mixin with functions that you can then include or “mixin” to other React components. It is useful for behavior that has cross-cutting concerns, such as setting and clearing intervals. However, they are a little controversial since this type of inheritance is not really a JavaScript concept. Also, they have certainly been abused in other languages/frameworks such as Ruby on Rails where it is not clear how multiple modules/mixins are interacting with each other. That said, if used sparingly and deliberately they can be a powerful tool for code reuse.</p>
<p className="it">Vamos a añadir la lógica de negocio necesaria para Game:</p>
<p className="p">Let’s add the necessary business logic to Game:</p>
<div className="image"><a></a><img src="/static/cod210.jpg" width="100%" alt="Image"/></div>
<p className="it">Hemos creado 3 funciones básicas para la actualización de la velocidad de la luz, con la participación del (movimiento de apertura) motor de curvatura, y la actualización de la posición de la nave usando  funciones de utilidad de nuestro navegador. Necesitamos pasar <code>{`updateSpeed()`}</code> y <code>{`engageWarpDrive`}</code> a <code>{`HelmControl`}</code> que hará su camino hasta <code>{`WarpDriveControls`}</code>. <code>{`clearIntervals()`}</code> y <code>{`setIntervals()`}</code> se definen en <code>{`SetIntervalMixin`}</code>. Vamos a seguir adelante y crear este nuevo <code>{`unfinished/app/mixins/SetIntervalMixin.jsx`}</code></p>
<p className="p">We created 3 basic functions for updating warp speed, engaging the warp drive (initiating movement), and updating ship position using our nav utility functions. We need to pass <code>{`updateSpeed()`}</code> and <code>{`engageWarpDrive`}</code> to <code>{`HelmControl`}</code> which will make its way down to <code>{`WarpDriveControls`}</code>.
<code>{`clearIntervals()`}</code> and <code>{`setIntervals()`}</code> are defined in <code>{`SetIntervalMixin`}</code>. Let’s go ahead create this new mixin under <code>{`unfinished/app/mixins/SetIntervalMixin.jsx`}</code></p>
<div className="image"><a></a><img src="/static/cod085.jpg" width="100%" alt="Image"/></div>
<p className="it"><code>{`componentWillMount()`}</code> y <code>{`componentWillUnount()`}</code> son métodos de ciclo de vida especiales que son parte de la API del componente React. Ellos le permiten enganchar en diferentes momentos de la vida de un componente React para tareas especiales, tales como hacer una petición AJAX o saltarse una re-render del componente. <code>{`componentWillMount()`}</code> se invoca sólo una vez, inmediatamente antes de los intervalos iniciales se produce el renderizado. Estamos utilizando este método para crear una array vacía para almacenar. <code>{`componentWillUnount()`}</code> se invoca justo antes de que un componente se desmonte del DOM. Estamos utilizando este método para asegurarnos que los intervalos hemos se borran antes de desmontar nuestro componente. Esto es útil para los casos en que el usuario navegado una parte diferente de nuestra aplicación, asegurándose de que los intervalos sobrantes se borran antes de retirar el componente.</p>

<p className="p"><code>{`componentWillMount()`}</code> and <code>{`componentWillUnount()`}</code> are special lifecycle methods that are part of the React component API. They allow you to hook into different moments of the life of a React component for special tasks, such as making an AJAX request or skipping a re-render of the com- ponent. <code>{`componentWillMount()`}</code> is invoked only once, immediately before the initial render occurs. We are using this method to create an empty array for storing intervals. <code>{`componentWillUnount()`}</code> is invoked right before a component is unmounted from the DOM. We are using this method to make sure any intervals we have are cleared before we unmount our component. This is useful for cases where the user navigated to a different part of our app, making sure any leftover intervals are cleared before the component is removed.</p>
<p className="it">Podras aprender más sobre los métodos de ciclo de vida directamente de la documentación: methods²⁵ ciclo de vida. Ahora vamos a seguir adelante y añadir un componente <code>{`WarpDriveControls`}</code> a nuestro componente <code>{`HelmControl`}</code>.</p>

<p className="p">You can learn more about lifecycle methods directly from the documentation: lifecycle methods²⁵. Now let’s go ahead and add a <code>{`WarpDriveControls`}</code> component to our <code>{`HelmControl`}</code> component.</p>
<p className="index">²⁵https://facebook.github.io/react/docs/component-specs.html</p>
<div className="image"><a></a><img src="/static/cod086.jpg" width="100%" alt="Image"/></div>
<p className="it">Nuestros nuevos <code>{`WarpDriveControls`}</code> necesitarán la velocidad de la nave, junto con los controladores de eventos para la actualización de velocidad de la luz y la participación de las unidades de urdimbre. Vamos a crear este componente <code>{`unfinished/app/com- ponents/WarpDriveControls.jsx.`}</code>.</p>

<p className="p">Our new <code>{`WarpDriveControls`}</code> will need the starship’s speed along with event handlers for updating warp speed and engaging the warp drives. Let’s create this component under <code>{`unfinished/app/com- ponents/WarpDriveControls.jsx.`}</code></p>
<div className="image"><a></a><img src="/static/cod089b.jpg" width="100%" alt="Image"/></div>
<p className="it">componente <code>{`WarpDriveControls`}</code> reutiliza <code>{`EditableElement`}</code> de antes en el tutorial. Esta es la belleza de React - la capacidad de reutilizar fácilmente los componentes. Esta vez, no tiene que establecer un atributo clave en EditableElement ya que no es parte de una lista. Nuestros métodos <code>{`updateSpeed()`}</code> y <code>{`incrementSpeed()()`}</code> actualizarán la velocidad siempre que el factor de urdimbre es superior a 0 e inferior a 10. Por supuesto, todos sabemos que no se puede viajar más rápido que el factor urdimbre 10...</p>

<p className="p"><code>{`WarpDriveControls`}</code> component reuses <code>{`EditableElement`}</code> from earlier in the tutorial. This is the beauty of React – the ability to easily reuse components. This time, we do not have to set a key attribute on <code>{`EditableElement`}</code> since it is not part of a list. Our <code>{`updateSpeed()`}</code>  and <code>{`incrementSpeed()()`}</code> methods will update the speed as long as the warp factor is more than 0 and less than 10. Of course we all know that you cannot travel faster than warp factor 10….</p>
<p className="it">Ahora podemos trazar un nuevo curso haciendo clic en un sistema de estrellas, elegir la velocidad de la deformación de nuestra nave, y comprometer a los motores de impulsión de la deformación, que se mueve nuestra nave espacial a través del chart de start. Debe ver esto en tu navegador:</p>

<p className="p">Now we can chart a new course by clicking a star system, choose the warp speed of our starship, and engage the warp drive engines, which moves our starship across the star chart. You should see this in your browser:</p>
<div className="image"><a></a><img src="/static/img096.jpg" width="100%" alt="Image"/></div>
<h2>Searching a Star System</h2>

<p className="it">Ahora queremos añadir la capacidad de trazar un camino a un sistema de estrellas mediante la búsqueda en su nombre. Vamos a añadir otro componente para trazar un curso escribiendo en un campo en lugar de hacer clic en el mapa de las estrellas. Esto podría ser útil si se conoce el nombre del sistema de estrellas, pero no recuerda donde está exactamente.</p>

<p className="p">Now we want to add the ability to chart a course to a star system by searching its name. Let’s add another component for charting a course by typing into a field rather than clicking on the star chart. That could be useful if you know the name of the star system but don’t remember where it is exactly.</p>
<p className="it">Más importante aún, esto nos da una oportunidad para demostrar cómo React los interactúa con bibliotecas de terceros ya que vamos a usar jQuery Autocompletar para la búsqueda. Hay bibliotecas amigables mejor reaccio- nado para autocompletar, pero queremos explorar cómo incorporar una biblioteca de terceros en React.</p>

<p className="p">More importantly, this gives us an opportunity to demonstrate how React interacts with third-party libraries since we are going to use jQuery Autocomplete for searching. There are better React- friendly libraries for autocomplete, but we want to explore how to incorporate a third-party library into React.</p>
<p className="it">Vamos a empezar por pasar datos a nuestra estrella componente <code>{`HelmControl`}</code> en el Juego:</p>

<p className="p">Let’s start by passing star data to our <code>{`HelmControl`}</code> component in Game:</p>
<div className="image"><a></a><img src="/static/cod089b.jpg" width="100%" alt="Image"/></div>
<p className="it">Ahora <code>{`HelmControl`}</code> tiene acceso a <code>{`starData`}</code>. Vamos a utilizar para que un componente <code>{`CourseControl`}</code>. Vamos a añadir ese componente a <code>{`HelmControl`}</code>.</p>
<p className="p">Now <code>{`HelmControl`}</code> has access to <code>{`starData`}</code>. We are going to use that for a <code>{`CourseControl`}</code> component. Let’s add that component to <code>{`HelmControl`}</code>.</p>
<p className="it">Hemos añadido un componente <code>{`CourseControl`}</code> y pase en <code>{`starData`}</code>, así como <code>{`updateDestination()`}</code> que vamos a utilizar un controlador de eventos cuando se selecciona un sistema de estrellas.</p>
<p className="p">We’ve added a <code>{`CourseControl`}</code> component and pass in <code>{`starData`}</code>, as well as <code>{`updateDestination()`}</code> which we will use an event handler when a star system is selected.</p>
<p className="it">Como se mencionó anteriormente, vamos a usar jQuery Autocompletar para hacer un cuadro de búsqueda para buscar y establecer un nuevo destino. Hay bibliotecas para la búsqueda de texto más adecuado para React, pero que querían utilizar una biblioteca que no está diseñado específicamente para React. Vamos a dar acceso jQuery Autocompletar a través del DOM <code>{`ReactDOM.findDOMNode`}</code> junto con una referencia al nodo DOM que estamos buscando. Tenemos que establecer este atributo ref explícitamente en el nodo DOM queremos mirar para más adelante. Entonces, podemos acceder a cada elemento ref través <code>{`this.refs`}</code>.</p>
<p className="p">As mentioned earlier, we are going to use jQuery Autocomplete to render a search box for searching and setting a new destination. There are libraries for text searching better suited for React, but we wanted to use a library not specifically designed for React. We are going to give jQuery Autocomplete access to the DOM via <code>{`ReactDOM.findDOMNode`}</code> along with a ref to DOM node we are looking for. We need to set this ref attribute explicitly in the DOM node we want to look for later. Then, we can access every ref element via <code>{`this.refs`}</code>.</p>
<p className="p">Let’s create CourseControl in <code>{`unfinished/app/components/CourseControl.jsx`}</code>:</p>
<div className="image"><a></a><img src="/static/cod090b.jpg" width="100%" alt="Image"/></div>
<p className="it">Toma nota de que añadimos un atributo ref en nuestro campo de entrada con el valor de “búsqueda”. Más tarde, si deseas tener acceso a este nodo DOM, podes hacerlo a través de <code>{`this.refs.search`}</code>. Podemos utilizar cualquier valor de referencia que nos guste. Cualquiera que sea el valor de 'ref' se convertirá en la key para acceder a este nodo DOM en <code>{`this.refs`}</code>.</p>
<p className="p">Take note we added a ref attribute to our input field with the value “search”. Later, if you want to access this DOM node you can do so via <code>{`this.refs.search`}</code>. We can use any value for ref we like. Whatever the value of ‘ref’ is will become the key to access this DOM node in <code>{`this.refs`}</code>.</p>
<p className="it"><code>{`componentDidMount()`}</code> y <code>{`componentDidUpdate()`}</code> otros métodos especiales React ciclo de vida. Como el nombre implica, <code>{`componentDidMount()`}</code> será invocado sólo una vez inmediatamente después de que el componente está montado en el DOM. <code>{`componentDidUpdate()`}</code>() se invoca después de las actualizaciones del componente se vacían en el DOM. Este método no es llamado para la primera representación. Vamos a utilizar <code>{`componentDidMount()`}</code> pasan a nuestro campo de introducción a jQuery Autocompletar y utilizaremos <code>{`componentDidUpdate()`}</code> para volver a unir al campo de entrada a jQuery Autocompletar en caso de que el componente se actualiza. Dentro de <code>{`autocomplete()`}</code> usamos <code>{`ReactDOM.findDomNode()`}</code> para encontrar nuestro campo de entrada y luego pasarlo a jQuery autocompletado.</p>
<p className="p"><code>{`componentDidMount()`}</code> and <code>{`componentDidUpdate()`}</code> are other special React lifecycle methods. As the name implies, <code>{`componentDidMount()`}</code> will be invoked only once immediately after the component is mounted to the DOM. <code>{`componentDidUpdate()`}</code>() is invoked after the component’s updates are flushed to the DOM. This method is not called for the initial render. We will use <code>{`componentDidMount()`}</code> pass our input field to jQuery Autocomplete and will use <code>{`componentDidUpdate()`}</code>() to reattach to the input field to jQuery Autocomplete in case the component is updated. Inside <code>{`autocomplete()`}</code> we use <code>{`ReactDOM.findDomNode()`}</code> to find our input field and then pass it to jQuery autocomplete.</p>
<p className="it">En este punto se debe ver todo el juego en el navegador:</p>
<p className="p">At this point you should see the entire game in the browser:</p>
<div className="image"><a></a><img src="/static/img097.jpg" width="100%" alt="Image"/></div>
<h2>Summary</h2>
<p className="it">Sólo has construido tu primer juego en React! Por supuesto, todavía hay una gran cantidad de funcionalidad que lograr. Probablemente esto podría  renderizarce en canvas en lugar de SVG y HTML, y podríamos añadir fuerzas opuestas y una mejor manera de distinguir los límites territoriales. Aún así, esta demo muestra adecuadamente las raíces del juego React, y cómo se pueden crear aplicaciones con funcionalidad no trivial con tan poco estado como sea posible.</p>
<p className="p">You’ve just built your first React game! Of course, there is still a lot of functionality to go. This could probably be rendered in canvas rather than SVG and HTML, and we could add opposing forces and a better way to distinguish territory boundaries. Still, this demo properly demonstrates React’s gaming roots, and how you can create applications with non-trivial functionality with as little state as possible.</p>
<p className="it">En el siguiente capítulo se pasará por un par de temas más avanzados, mientras mejoramos nuestro juego.</p>
<p className="p">The following chapter will go through a few more advanced topics while improving our game.</p>
</div>
</div>
  </Layout>
)
